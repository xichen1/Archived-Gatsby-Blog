{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/templates/blog-post.js"],"names":["Bio","data","site","siteMetadata","author","social","style","display","marginBottom","rhythm","fixed","avatar","childImageSharp","alt","name","marginRight","minWidth","borderRadius","imgStyle","summary","href","twitter","github","BlogPostTemplate","pageContext","location","post","markdownRemark","siteTitle","title","previous","next","frontmatter","description","excerpt","marginTop","scale","date","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","padding","to","fields","slug","rel","pageQuery"],"mappings":"uLA2EeA,IA9DH,WACV,IAAMC,EAAI,OADM,EAyBWA,EAAKC,KAAKC,aAA7BC,EAzBQ,EAyBRA,OAAQC,EAzBA,EAyBAA,OAChB,OACE,yBACEC,MAAO,CACLC,QAAQ,OACRC,aAAcC,YAAO,OAGvB,kBAAC,IAAD,CACEC,MAAOT,EAAKU,OAAOC,gBAAgBF,MACnCG,IAAKT,EAAOU,KACZR,MAAO,CACLS,YAAaN,YAAO,IACpBD,aAAc,EACdQ,SAAU,GACVC,aAAa,QAEfC,SAAU,CACRD,aAAa,SAGjB,yCACa,gCAASb,EAAOU,MAD7B,IAC6CV,EAAOe,QADpD,8BAIE,uBAAGC,KAAI,uBAAyBf,EAAOgB,SAAvC,WAJF,OAQE,uBAAGD,KAAI,sBAAwBf,EAAOiB,QAAtC,c,omDCaOC,UAxEU,SAAC,GAAqC,IAAnCtB,EAAkC,EAAlCA,KAAMuB,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACvCC,EAAOzB,EAAK0B,eACZC,EAAY3B,EAAKC,KAAKC,aAAa0B,MACjCC,EAAmBN,EAAnBM,SAAUC,EAASP,EAATO,KAElB,OACE,kBAAC,IAAD,CAAQN,SAAUA,EAAUI,MAAOD,GACjC,kBAAC,IAAD,CACEC,MAAOH,EAAKM,YAAYH,MACxBI,YAAaP,EAAKM,YAAYC,aAAeP,EAAKQ,UAEpD,iCACE,gCACE,wBACE5B,MAAO,CACL6B,UAAW1B,YAAO,GAClBD,aAAc,IAGfkB,EAAKM,YAAYH,OAEpB,uBACEvB,MAAK,iBACA8B,aAAM,IADN,CAEH7B,QAAQ,QACRC,aAAcC,YAAO,MAGtBiB,EAAKM,YAAYK,OAGtB,6BAASC,wBAAyB,CAAEC,OAAQb,EAAKc,QACjD,wBACElC,MAAO,CACLE,aAAcC,YAAO,MAGzB,gCACE,kBAAC,IAAD,QAIJ,6BACE,wBACEH,MAAO,CACLC,QAAQ,OACRkC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACGd,GACC,kBAAC,OAAD,CAAMe,GAAIf,EAASgB,OAAOC,KAAMC,IAAI,QAApC,KACKlB,EAASE,YAAYH,QAI9B,4BACGE,GACC,kBAAC,OAAD,CAAMc,GAAId,EAAKe,OAAOC,KAAMC,IAAI,QAC7BjB,EAAKC,YAAYH,MADpB,WAaP,IAAMoB,EAAS","file":"component---src-templates-blog-post-js-24d702d66580a65bc965.js","sourcesContent":["/**\r\n * Bio component that queries for data\r\n * with Gatsby's useStaticQuery component\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport Image from \"gatsby-image\"\r\n\r\nimport { rhythm } from \"../utils/typography\"\r\n\r\nconst Bio = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query BioQuery {\r\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\r\n        childImageSharp {\r\n          fixed(width: 50, height: 50) {\r\n            ...GatsbyImageSharpFixed\r\n          }\r\n        }\r\n      }\r\n      site {\r\n        siteMetadata {\r\n          author {\r\n            name\r\n            summary\r\n          }\r\n          social {\r\n            twitter\r\n            github\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const { author, social } = data.site.siteMetadata\r\n  return (\r\n    <div\r\n      style={{\r\n        display: `flex`,\r\n        marginBottom: rhythm(2.5),\r\n      }}\r\n    >\r\n      <Image\r\n        fixed={data.avatar.childImageSharp.fixed}\r\n        alt={author.name}\r\n        style={{\r\n          marginRight: rhythm(1 / 2),\r\n          marginBottom: 0,\r\n          minWidth: 50,\r\n          borderRadius: `100%`,\r\n        }}\r\n        imgStyle={{\r\n          borderRadius: `50%`,\r\n        }}\r\n      />\r\n      <p>\r\n        Written by <strong>{author.name}</strong> {author.summary}\r\n        You can follow him on &nbsp;\r\n        {` `}\r\n        <a href={`https://twitter.com/${social.twitter}`}>\r\n        Twitter\r\n        </a>\r\n        &nbsp;OR&nbsp;\r\n        <a href={`https://github.com/${social.github}`}>\r\n        Github\r\n        </a>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Bio\r\n","import React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Bio from \"../components/bio\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport { rhythm, scale } from \"../utils/typography\"\r\n\r\nconst BlogPostTemplate = ({ data, pageContext, location }) => {\r\n  const post = data.markdownRemark\r\n  const siteTitle = data.site.siteMetadata.title\r\n  const { previous, next } = pageContext\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <SEO\r\n        title={post.frontmatter.title}\r\n        description={post.frontmatter.description || post.excerpt}\r\n      />\r\n      <article>\r\n        <header>\r\n          <h1\r\n            style={{\r\n              marginTop: rhythm(1),\r\n              marginBottom: 0,\r\n            }}\r\n          >\r\n            {post.frontmatter.title}\r\n          </h1>\r\n          <p\r\n            style={{\r\n              ...scale(-1 / 5),\r\n              display: `block`,\r\n              marginBottom: rhythm(1),\r\n            }}\r\n          >\r\n            {post.frontmatter.date}\r\n          </p>\r\n        </header>\r\n        <section dangerouslySetInnerHTML={{ __html: post.html }} />\r\n        <hr\r\n          style={{\r\n            marginBottom: rhythm(1),\r\n          }}\r\n        />\r\n        <footer>\r\n          <Bio />\r\n        </footer>\r\n      </article>\r\n\r\n      <nav>\r\n        <ul\r\n          style={{\r\n            display: `flex`,\r\n            flexWrap: `wrap`,\r\n            justifyContent: `space-between`,\r\n            listStyle: `none`,\r\n            padding: 0,\r\n          }}\r\n        >\r\n          <li>\r\n            {previous && (\r\n              <Link to={previous.fields.slug} rel=\"prev\">\r\n                ← {previous.frontmatter.title}\r\n              </Link>\r\n            )}\r\n          </li>\r\n          <li>\r\n            {next && (\r\n              <Link to={next.fields.slug} rel=\"next\">\r\n                {next.frontmatter.title} →\r\n              </Link>\r\n            )}\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogPostTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug($slug: String!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      id\r\n      excerpt(pruneLength: 160)\r\n      html\r\n      frontmatter {\r\n        title\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        description\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}